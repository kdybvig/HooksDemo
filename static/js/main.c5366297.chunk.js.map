{"version":3,"sources":["articles.js","components/FunctionalArticleFinder.js","App.js","serviceWorker.js","index.js"],"names":["lorem","LoremIpsum","sentencesPerParagraph","max","min","wordsPerSentence","articles","capitalize","str","indexOf","split","map","join","charAt","toUpperCase","slice","i","push","title","generateWords","Math","ceil","random","body","generateParagraphs","floor","fetchArticles","_x","_fetchArticles","apply","this","arguments","_callee","searchText","regex","fetchResult","regenerator_default","a","wrap","_context","prev","next","RegExp","delay","filter","article","test","abrupt","stop","ArticleFinder","_ref","closeFinder","initialLength","pow","window","innerWidth","_useState","useState","_useState2","Object","slicedToArray","setArticles","_useState3","_useState4","setSearchText","_useState5","_useState6","articleLength","setArticleLength","useEffect","handleResize","newLength","addEventListener","removeEventListener","handleKeypress","e","key","didCancel","_fetchNewArticles","asyncToGenerator","mark","newArticles","sent","fetchNewArticles","react_default","createElement","style","color","type","value","onChange","target","length","index","App","isOpen","setIsOpen","FunctionalArticleFinder","backgroundColor","fontSize","padding","onClick","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5366297.chunk.js","sourcesContent":["import { LoremIpsum } from \"lorem-ipsum\";\nimport { delay } from \"q\";\n\nconst lorem = new LoremIpsum({\n  sentencesPerParagraph: {\n    max: 8,\n    min: 4\n  },\n  wordsPerSentence: {\n    max: 16,\n    min: 4\n  }\n});\n\nconst articles = []\n\nconst capitalize = (str) => {\n    if(str.indexOf(' ') >= 0) return (\n      str.split(' ').map(str => capitalize(str)).join(' ')\n    ) \n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\nfor(let i =0; i<100; i++) {\n    articles.push(\n        {\n            title: capitalize(lorem.generateWords(Math.ceil(Math.random()*4))),\n            body: lorem.generateParagraphs(15 + Math.floor(Math.random()*7))\n        }\n    )\n}\n\nexport async function fetchArticles(searchText) {\n    if(!searchText) searchText= ''\n\n    const regex = new RegExp(searchText, 'i')\n    await delay(100 + Math.floor(Math.random()*300))\n    const fetchResult = articles.filter(article => regex.test(article.title)).slice(0,10)\n    return fetchResult\n}\n\nexport default articles","import React, {useState, useEffect} from 'react'\nimport { fetchArticles } from '../articles';\n\nconst ArticleFinder = ({closeFinder}) => {\n    const initialLength = Math.floor(Math.pow(window.innerWidth,1.5)/35)\n    const [articles, setArticles] = useState([]);\n    const [searchText, setSearchText] = useState('');\n    const [articleLength, setArticleLength] = useState(initialLength)\n\n    //update article length when screensize changes\n    useEffect(() => {\n        function handleResize () {\n            const newLength = Math.floor(Math.pow(window.innerWidth,1.5)/35)\n            setArticleLength(newLength)\n        }\n        window.addEventListener('resize', handleResize)\n\n        return () => {\n            window.removeEventListener('resize', handleResize)\n        }\n    },[])\n\n    //close form when escape key is pressed\n    useEffect(()=> {\n        function handleKeypress(e) {\n            if(e.key === 'Escape') closeFinder()\n        }\n        window.addEventListener('keydown', handleKeypress)\n\n        return () => {\n            window.removeEventListener('keydown', handleKeypress)\n        }\n    }, [])\n\n    //fetch articles from server whenever search text changes\n    useEffect(() => {\n        let didCancel = false\n        async function fetchNewArticles () {\n            const newArticles = await fetchArticles(searchText) \n            if(didCancel) return\n            setArticles(newArticles)\n        }\n        fetchNewArticles()\n        \n        return () => { \n            //avoid state changes when component is unmounted, and cancel previous fetch calls\n            didCancel = true\n        }\n    }, [searchText])\n\n    return (\n        <div>\n            <h1>Article Finder</h1>\n            <h5 \n                style={{color: 'red'}}>\n                Press Escape At Any Time To Close Article Finder\n            </h5>\n            <h3>\n                Find me articles about \n                <input \n                type='text' \n                value={searchText} \n                onChange={e=> setSearchText(e.target.value)}/>\n            </h3>\n            {!articles.length && <p>No results for {searchText}</p>}\n            {articles.map((article, index) => {\n                return (\n                    <article key={'article-' + index}>\n                        <h1>{article.title}</h1>\n                        <p>{article.body.slice(0, articleLength) + ' ...'}</p>\n                    </article>\n                )\n            }\n            )}\n        </div>\n    )\n   \n}\n\nexport default ArticleFinder;","import React, { useState } from 'react';\nimport './App.css';\nimport ArticleFinder from './components/FunctionalArticleFinder';\n\nconst App = () => {\n\n  const [isOpen, setIsOpen] = useState(false)\n\n  \n\n  return isOpen ? \n      <ArticleFinder closeFinder={() => setIsOpen(false)}/> : \n      <div>\n        <h1>Article Finding Application Homepage</h1>\n        <button \n          style={{\n            backgroundColor: 'blue', \n            color: 'white', \n            fontSize: 25, \n            padding: '25px'}}\n          onClick={()=>setIsOpen(true)}>\n          Open Article Finder\n        </button>\n      </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}